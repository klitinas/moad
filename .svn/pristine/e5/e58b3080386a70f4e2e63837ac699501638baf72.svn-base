<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_minibest extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */
    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "minibest";           // test_names.Test_name
        $this->table = 'minibest';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("Minibest Assessment");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		//$this->addHeader("<MY TITLE>");		

		$notes = $this->form->addElement('text', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));

		$hdr = $this->form->addElement('static','hdr','Score items 1-14 values 0,1,or 2');
		$sit_to_stand = $this->form->addElement('text', 'sit_to_stand', '( 1) Sit to stand :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('sit_to_stand', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$rise_to_toes = $this->form->addElement('text', 'rise_to_toes', '( 2) Rise to toes :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('rise_to_toes', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$stand_leg_left = $this->form->addElement('text', 'stand_leg_left', '(3a) Stand on one leg (left) :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('stand_leg_left', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$stand_leg_right = $this->form->addElement('text', 'stand_leg_right', '(3b) Stand on one leg (right) :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('stand_leg_right', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$comp_stepcorr_fwd = $this->form->addElement('text', 'comp_stepcorr_fwd', '( 4) Compensatory stepping correction [fwd] :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('comp_stepcorr_fwd', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$comp_stepcorr_back = $this->form->addElement('text', 'comp_stepcorr_back', '( 5) Compensatory stepping correction [back] :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('comp_stepcorr_back', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$comp_stepcorr_left = $this->form->addElement('text', 'comp_stepcorr_left', '(6a) Compensatory stepping corr [left] :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('comp_stepcorr_left', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$comp_stepcorr_right = $this->form->addElement('text', 'comp_stepcorr_right', '(6b) Compensatory stepping corr [right] :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('comp_stepcorr_right', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$stance_eyesopen_firm = $this->form->addElement('text', 'stance_eyesopen_firm', '( 7) Stance, eyes open, firm surface :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('stance_eyesopen_firm', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$stance_eyesopen_foam = $this->form->addElement('text', 'stance_eyesopen_foam', '( 8) Stance, eyes open, foam surface :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('stance_eyesopen_foam', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$incline_eyesclosed = $this->form->addElement('text', 'incline_eyesclosed', '( 9) Incline, eyes closed :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('incline_eyesclosed', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$change_gaitspeed = $this->form->addElement('text', 'change_gaitspeed', '(10) Change in gait speed :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('change_gaitspeed', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$walk_head_horiz = $this->form->addElement('text', 'walk_head_horiz', '(11) Walk with head turns-horizontal :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('walk_head_horiz', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$walk_pivot = $this->form->addElement('text', 'walk_pivot', '(12) Walk with pivot turns :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('walk_pivot', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$step_over_obs = $this->form->addElement('text', 'step_over_obs', '(13) Step over obstacles :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('step_over_obs', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$timed_up_go_dualtask = $this->form->addElement('text', 'timed_up_go_dualtask', '(14) Timed up and go with dual task :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('timed_up_go_dualtask', 'Enter 0,1,2,or NA', 'regex', '/(?i)^(na|0|1|2)$/','client');

		$total = $this->form->addElement('static','total','Calculated total:');

		$tug = $this->form->addElement('text', 'tug', 'TUG (sec):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('tug', 'Enter numeric value', 'numeric', 'client');

		$dual_tug = $this->form->addElement('text', 'dual_tug', 'Dual TUG (sec):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('dual_tug', 'Enter numeric value', 'numeric', 'client');


    }
   
   
}
?>
