<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_pdq extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */
    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "pdq";           // test_names.Test_name
        $this->table = 'pdq';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("PDQ-39 Questionnaire");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		$this->addHeader("<MY TITLE>");		

		$i01 = $this->form->addElement('text', 'i01', '1. Difficulty with leisure (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i01', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');
		
		$i02 = $this->form->addElement('text', 'i02', '2. Difficulty looking after home (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i02', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i03 = $this->form->addElement('text', 'i03', '3. Difficulty with bags/shopping (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i03', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i04 = $this->form->addElement('text', 'i04', '4. Problems walking 0.5mi (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i04', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i05 = $this->form->addElement('text', 'i05', '5. Problems walking 100yds (0-4)', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i05', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i06 = $this->form->addElement('text', 'i06', '6. Problems getting around house (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i06', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i07 = $this->form->addElement('text', 'i07', '7. Difficulty getting around in public (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i07', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i08 = $this->form->addElement('text', 'i08', '8. Needed accompaniment going out (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i08', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i09 = $this->form->addElement('text', 'i09', '9. Frightened falling in public (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i09', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i10 = $this->form->addElement('text', 'i10', '10. Confined to house (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i10', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i11 = $this->form->addElement('text', 'i11', '11. Difficulty washing (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i11', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i12 = $this->form->addElement('text', 'i12', '12. Difficulty dressing (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i12', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i13 = $this->form->addElement('text', 'i13', '13. Problems with shoe laces (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i13', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i14 = $this->form->addElement('text', 'i14', '14. Problems writing clearly (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i14', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i15 = $this->form->addElement('text', 'i15', '15. Difficulty cutting food (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i15', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i16 = $this->form->addElement('text', 'i16', '16. Difficulty holding drink (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i16', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i17 = $this->form->addElement('text', 'i17', '17. Depressed (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i17', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i18 = $this->form->addElement('text', 'i18', '18. Isolated/Lonely (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i18', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i19 = $this->form->addElement('text', 'i19', '19. Weepy/Tearful (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i19', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i20 = $this->form->addElement('text', 'i20', '20. Angry/Bitter (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i20', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i21 = $this->form->addElement('text', 'i21', '21. Anxious (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i21', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i22 = $this->form->addElement('text', 'i22', '22. Worried about future (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i22', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i23 = $this->form->addElement('text', 'i23', '23. Felt have to conceal PD (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i23', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i24 = $this->form->addElement('text', 'i24', '24. Avoided eating/drinking in public (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i24', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i25 = $this->form->addElement('text', 'i25', '25. Embarrassed in public about PD (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i25', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i26 = $this->form->addElement('text', 'i26', '26. Worried about reactions (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i26', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i27 = $this->form->addElement('text', 'i27', '27. Problems with close personal relationships (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i27', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i28 = $this->form->addElement('text', 'i28', '28. Lacked partner/spouse support (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i28', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i29 = $this->form->addElement('text', 'i29', '29. Lacked family/friend support (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i29', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i30 = $this->form->addElement('text', 'i30', '30. Unexpectedly fallen asleep (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i30', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i31 = $this->form->addElement('text', 'i31', '31. Problems with concentration (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i31', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i32 = $this->form->addElement('text', 'i32', '32. Felt memory bad (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i32', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i33 = $this->form->addElement('text', 'i33', '33. Distressing dreams/hallucinations (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i33', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i34 = $this->form->addElement('text', 'i34', '34. Difficulty with speech (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i34', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');
		
		$i35 = $this->form->addElement('text', 'i35', '35. Felt unable to communicate (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i35', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i36 = $this->form->addElement('text', 'i36', '36. Felt ignored (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i36', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i37 = $this->form->addElement('text', 'i37', '37. Painful muscle cramps/spasms (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i37', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i38 = $this->form->addElement('text', 'i38', '38. Aches/Pains in joints or body (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i38', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$i39 = $this->form->addElement('text', 'i39', '39. Unpleasantly hot or cold (0-4):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i39', 'Enter 0-4', 'regex', '/(?i)^(0|1|2|3|4|0.00|1.00|2.00|3.00|4.00)$/', 'client');

		$mobility = $this->form->addElement('static','mobility','Mobility:'); 
		$adl = $this->form->addElement('static','adl','ADL:');
		$emotion = $this->form->addElement('static','emotion','Emotion:');
		$stigma = $this->form->addElement('static','stigma','Stigma:');
		$social_support = $this->form->addElement('static','social_support','Social Support:');
		$cognitions = $this->form->addElement('static','cognitions','Cognitions:');
		$communication = $this->form->addElement('static','communication','Communication:');
		$bodily_discomfort = $this->form->addElement('static','bodily_discomfort','Bodily Discomfort:');
		$total = $this->form->addElement('static','total','Total:');        
    }
   
   
}
?>
