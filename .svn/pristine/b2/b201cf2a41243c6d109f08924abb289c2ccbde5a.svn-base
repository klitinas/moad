<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_bdiii extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */
    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "bdiii";           // test_names.Test_name
        $this->table = 'bdiii';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("Beck Depression Inventory-II");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		$this->addHeader("<MY TITLE>");

		$notes = $this->form->addElement('text', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));
		$warnings = $this->form->addElement('static','warnings','Warnings:');

		$this->addHeader("<MY TITLE>");
		$hdr = $this->form->addElement('static','hdr','Enter values 0-3 for all fields below:');		

		$i01 = $this->form->addElement('text', 'i01', '1. Sadness:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i01', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');
		
		$i02 = $this->form->addElement('text', 'i02', '2. Pessimism:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i02', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i03 = $this->form->addElement('text', 'i03', '3. Past failure:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i03', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i04 = $this->form->addElement('text', 'i04', '4. Loss of Pleasure:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i04', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i05 = $this->form->addElement('text', 'i05', '5. Guilty Feelings:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i05', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i06 = $this->form->addElement('text', 'i06', '6. Punishment Feelings:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i06', 'Enter 0-3', 'regex', '/(?i)^(na|1|2|3|0|1.00|2.00|3.00|0.00)$/', 'client');

		$i07 = $this->form->addElement('text', 'i07', '7. Self-Dislike:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i07', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i08 = $this->form->addElement('text', 'i08', '8. Self-Criticalness:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i08', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i09 = $this->form->addElement('text', 'i09', '9. Suicidal Thoughts/Wishes:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i09', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i10 = $this->form->addElement('text', 'i10', '10. Crying:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i10', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i11 = $this->form->addElement('text', 'i11', '11. Agitation:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i11', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i12 = $this->form->addElement('text', 'i12', '12. Loss of Interest:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i12', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i13 = $this->form->addElement('text', 'i13', '13. Indecisiveness:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i13', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i14 = $this->form->addElement('text', 'i14', '14. Worthlessness:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i14', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i15 = $this->form->addElement('text', 'i15', '15. Loss of Energy:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i15', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i16 = $this->form->addElement('text', 'i16', '16. Changes in Sleeping Pattern:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i16', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i17 = $this->form->addElement('text', 'i17', '17. Irritability:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i18', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i18 = $this->form->addElement('text', 'i18', '18. Changes in Appetite:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i18', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i19 = $this->form->addElement('text', 'i19', '19. Concentration Difficulty:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i19', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i20 = $this->form->addElement('text', 'i20', '20. Tiredness/Fatigue:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i20', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$i21 = $this->form->addElement('text', 'i21', '21. Loss of Interest in Sex:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('i21', 'Enter 0-3', 'regex', '/(?i)^(na|0|1|2|3|0.00|1.00|2.00|3.00)$/', 'client');

		$total = $this->form->addElement('static','total','Calculated total:');

		
    }
   
   
}
?>
