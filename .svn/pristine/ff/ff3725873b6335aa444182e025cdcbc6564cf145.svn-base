<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_vision extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */
    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "vision";           // test_names.Test_name
        $this->table = 'vision';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("Vision Summary");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		//$this->addHeader("<MY TITLE>");		

		$notes = $this->form->addElement('text', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));


		$color_blind = $this->form->addElement('text', 'color_blind', 'Color blind (Y/N):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('color_blind', 'Enter Y or N', 'regex', '/(?i)^(na|y|n)$/','client');
		$color_vision = $this->form->addElement('text', 'color_vision', 'Color vision :', array('size' => 50, 'maxlength' => 255));
		$this->addRule('color_vision', 'Acceptable values: norm,deutan,protan,tritan,pro/trit,pro/deut', 'regex', '/(?i)^(na|norm|deutan|protan|tritan|pro\/trit|pro\/deut)$/','client');

		$this->addHeader("<MY TITLE>");
		$this->form->addElement('static','hdr','ALL VALUES BELOW MUST BE NUMERIC:');
		$this->addHeader("<MY TITLE>");

		$vis_cont_r = $this->form->addElement('text', 'vis_cont_r', 'Vis cont - Right:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('vis_cont_r', 'Value must be numeric', 'numeric', 'client');

		$vis_cont_l = $this->form->addElement('text', 'vis_cont_l', 'Vis cont - Left:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('vis_cont_l', 'Value must be numeric', 'numeric', 'client');

		$vis_cont_bl = $this->form->addElement('text', 'vis_cont_bl', 'Vis cont - Bilateral:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('vis_cont_bl', 'Value must be numeric', 'numeric', 'client');

		$this->addHeader("<MY TITLE>");

		$rt_ton = $this->form->addElement('text', 'rt_ton', 'Tonometer - Right:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('rt_ton', 'Value must be numeric', 'numeric', 'client');

		$lt_ton = $this->form->addElement('text', 'lt_ton', 'Tonometer - Left:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('lt_ton', 'Value must be numeric', 'numeric', 'client');

		$this->addHeader("<MY TITLE>");

		$rabin = $this->form->addElement('text', 'rabin', 'RABIN CONTRAST:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('rabin', 'Value must be numeric', 'numeric', 'client');

		$tes_mun = $this->form->addElement('text', 'tes_mun', 'MUNSELL 100 TES:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('tes_mun', 'Value must be numeric', 'numeric', 'client');

		$this->addHeader("<MY TITLE>");
		$this->form->addElement('static','hdr','STEREO');
		
		$butterfly = $this->form->addElement('text', 'butterfly', '--Butterfly:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('butterfly', 'Value must be numeric', 'numeric', 'client');

		$fly = $this->form->addElement('text', 'fly', '--Fly:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('fly', 'Value must be numeric', 'numeric', 'client');

		$circles = $this->form->addElement('text', 'circles', '--Circles:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('circles', 'Value must be numeric', 'numeric', 'client');

		$animals = $this->form->addElement('text', 'animals', '--Animals:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('animals', 'Value must be numeric', 'numeric', 'client');

		$this->addHeader("<MY TITLE>");

		$ishihara = $this->form->addElement('text', 'ishihara', 'ISHIHARA:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('ishihara', 'Value must be numeric', 'numeric', 'client');


    }
   
   
}
?>
