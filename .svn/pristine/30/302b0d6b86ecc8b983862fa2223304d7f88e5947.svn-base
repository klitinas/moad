<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_olfaction extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */

        function drop_yn($field,$text) {
                $opts = array(
                        ''=>'-Select an option-',
						'yes'=>'Yes',
                        'no'=>'No'
                        );
                $element = $this->form->addElement('select', $field, $text,$opts);
                return $element;
        }

        function drop_ynna($field,$text) {
                $opts = array(
                        ''=>'-Select an option-',
						'yes'=>'Yes',
                        'no'=>'No',
						'na'=>'Is not applicable'
                        );
                $element = $this->form->addElement('select', $field, $text,$opts);
                return $element;
        }

    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "olfaction";           // test_names.Test_name
        $this->table = 'olfaction';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("Olfaction Summary");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		//$this->addHeader("<MY TITLE>");		

		$this->addHeader("<MY TITLE>");		
		$notes = $this->form->addElement('textarea', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));
		$warnings = $this->form->addElement('static','warnings','Warnings:');
		$this->addHeader("<MY TITLE>");	


		//$this->addHeader("GENERAL");

		
		//$this->form->addElement('static','hdr','ALL VALUES BELOW MUST BE NUMERIC:');



		$this->addHeader("Acoustic Rhinometer");		

		$rhinevol_r = $this->form->addElement('text', 'rhinevol_r', 'Volume - Left:');
		$this->addRule('rhinevol_r', 'Value must be numeric', 'numeric', 'client');


		$rhinevol_l = $this->form->addElement('text', 'rhinevol_l', 'Volume - Left:');
		$this->addRule('rhinevol_l', 'Value must be numeric', 'numeric', 'client');

		//$this->addHeader("Sniffin' Sticks");		
		$this->addHeader("Sniff Magnitude Test");
		$sniff_1 = $this->form->addElement('text', 'sniff_1', 'Canister 1 Ratio:');
		$this->addRule('sniff_1', 'Value must be numeric', 'numeric', 'client');

		$sniff_2 = $this->form->addElement('text', 'sniff_2', 'Canister 2 Ratio:');
		$this->addRule('sniff_2', 'Value must be numeric', 'numeric', 'client');

		$sniff_3 = $this->form->addElement('text', 'sniff_3', 'Canister 3 Ratio:');
		$this->addRule('sniff_3', 'Value must be numeric', 'numeric', 'client');

		$sniff_4 = $this->form->addElement('text', 'sniff_4', 'Canister 4 Ratio:');
		$this->addRule('sniff_4', 'Value must be numeric', 'numeric', 'client');

		/*$snif_th = $this->form->addElement('text', 'snif_th', 'Smell Threshold:');
		$this->addRule('snif_th', 'Value must be numeric', 'numeric', 'client');

		$snif_disc = $this->form->addElement('text', 'snif_disc', 'Smell Discrimination:');
		$this->addRule('snif_disc', 'Value must be numeric', 'numeric', 'client');

		$snif_ID = $this->form->addElement('text', 'snif_ID', 'Smell Identification:');
		$this->addRule('snif_ID', 'Value must be numeric', 'numeric', 'client');
		*/
		$this->addHeader("Rhinorrhea Questionnaire");		
		
		$this->drop_yn('rhino_dec_smell', 'Decreased sense of smell :');
		$this->drop_yn('rhino_run_nose', 'Frequently have runny nose :');
		$this->drop_ynna('rhino_aller', '-- Related to allergies :');
		$this->drop_ynna('rhino_sinus', '-- Related to sinus problems :');
		$this->drop_ynna('rhino_colds', '-- Related to freq colds :');

		//$rhino_bef_aft = $this->form->addElement('text', 'rhino_bef_aft', '-- Start before or after Parkinson symptoms (before/after/NA):');
		$this->form->addElement('select','rhino_bef_aft','-- Start before or after Parkinson symptoms?',
			array(''=>'-Select an option-','before'=>'Before','after'=>'After','na'=>'Is not applicable'));

		$this->drop_ynna('rhino_w_eat', '-- Runny nose worsen with eating :');

    }
   
   
}
?>
