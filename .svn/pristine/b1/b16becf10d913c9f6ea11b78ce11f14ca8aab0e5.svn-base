<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
//require_once 'HTML/QuickForm/altselect.php';


class NDB_BVL_Instrument_substance_abuse extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */


    function _checkother($elements) {
		//return false;
		print_r($elements);
      if ($elements[0] == 'Other, please specify:')
      {   
         if ($elements[1] =='')
            return false;
      } 
      return true;
   }


    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "substance_abuse";           // test_names.Test_name
        $this->table = 'substance_abuse';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){

        // display test name
        $this->addHeader("Substance Abuse");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();
		$notes = $this->form->addElement('textarea', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));
		$warnings = $this->form->addElement('static','warnings','Warnings:');
		$this->addHeader("<HDR>");

		$this->addHeader("Smoking");
		$tob_hist = $this->form->addElement('text', 'tob_hist', '1. Has the subject ever used tobacco?	 (Y/N/U):');
		$this->addRule('tob_hist', 'Enter Y,N,U, or NA', 'regex', '/(?i)^(na|y|n|u)$/', 'client');

		$cur_tob_use = $this->form->addElement('text', 'cur_tob_use', '2. Current tobacco use?	 (Y/N/U):');
		$this->addRule('cur_tob_use', 'Enter Y,N,U, or NA', 'regex', '/(?i)^(na|y|n|u)$/', 'client');

		$past_tob_use = $this->form->addElement('text', 'past_tob_use', '3. Past tobacco use?	 (Y/N/U):');
		$this->addRule('past_tob_use', 'Enter Y,N,U, or NA', 'regex', '/(?i)^(na|y|n|u)$/', 'client');

		$age_tob_use = $this->form->addElement('text', 'age_tob_use', '4. Age started tobacco use?	 (years):');
		//$this->addRule('past_tob_use', 'Enter Y,N,U, or NA', 'regex', '/(?i)^(na|y|n|u)$/', 'client');

		$still_using_tob = $this->form->addElement('text', 'still_using_tob', '5a. Subject still using tobacco? (Y/N/U):');
		$this->addRule('still_using_tob', 'Enter Y,N,U, or NA', 'regex', '/(?i)^(na|y|n|u)$/', 'client');

		//$tob_opts = array(''=>'None',

		$tobopts = array(''=>'',
					'filtered cigarettes'=>'Filtered cigarettes',
					'low tar cigarettes' => 'Low tar cigarettes',
					'non-filtered/plain cigarettes'=> 'Non-filtered (plain) cigarettes',
					'cigar' => 'Cigar',
					'pipe'=>'Pipe', 
					'chewing tobacco' => 'Chewing tobacco',
					'other' => 'Other');

		$tob_type = $this->form->addElement('select', 'tob_type', 'Type(s) of tobacco used (ctrl+click to select multiple):',$tobopts);
		//$tob_type-> setMultiple(true);



		$this->addHeader("<HDR>");

		

		$educopts = array(''=>'',
					'Never attended / Kindergarten only' => 'Never attended / Kindergarten only',
					'1st Grade' => '1st Grade',
					'2nd Grade' => '2nd Grade',
					'3rd Grade' => '3rd Grade',
					'4th Grade' => '4th Grade',
					'5th Grade' => '5th Grade',
					'6th Grade' => '6th Grade',
					'7th Grade' => '7th Grade',
					'8th Grade' => '8th Grade',
					'9th Grade' => '9th Grade',
					'10th Grade' => '10th Grade',
					'11th Grade' => '11th Grade',
					'12th Grade, no diploma' => '12th Grade, no diploma',
					'High school graduate' => 'High school graduate',
					'GED or equivalent' => 'GED or equivalent',
					'Some college, no degree' => 'Some college, no degree',
					'Associate degree: occupation, technical, or vocational program' 
							=> 'Associate degree: occupation, technical, or vocational program',
					'Associate degree: academic program' => 'Associate degree: academic program',
					"Bachelor's degree (e.g. BA, AB, BS, BBA)" => "Bachelor's degree (e.g. BA, AB, BS, BBA)",
					"Master's degree (e.g., MA, MS, MEng, MEd, MBA)" => "Master's degree (e.g., MA, MS, MEng, MEd, MBA)",
					"Professional school degree (e.g., MD, DDS, DVM, JD)" => "Professional school degree (e.g., MD, DDS, DVM, JD)",
					'Unknown' => 'Unknown');
		

	

   }
   
   
}

function _checkother($elements) {
	print_r($elements);
	if ($elements == 'Other')
	{   
		return false;
		//if ($elements[1] =='')
        //    return false;
      } 
      return true;
   }
?>
