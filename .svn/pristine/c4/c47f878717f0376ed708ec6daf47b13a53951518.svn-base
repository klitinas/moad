<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_smell extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */


	function smellitem($name,$text) {

		$lst = range(0,1);
		$vals = array_combine($lst,$lst);
		$opts = array(''=>'-Select an option-') + $vals + array('na'=>'Not applicable');
		
		$entry = $this->form->addElement('select', $name, $text,$opts);
		$this->addRule($name,'This field is required','required');

		//$entry = $this->form->addElement('text', $name, $text);
		//$this->addRule($name, 'Enter 0, 1, or NA', 'regex', '/(?i)^(na|0|1)$/', 'client');
		return $entry;
	} 

    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "smell";           // test_names.Test_name
        $this->table = 'smell';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("UPSIT Assessment");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		$this->addHeader("<MY TITLE>");		
		$notes = $this->form->addElement('textarea', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));
		$warnings = $this->form->addElement('static','warnings','Warnings:');
		$this->addHeader("<MY TITLE>");

		$hdr = $this->form->addElement('static', 'hdr', 'For smell 1-40, enter 1 for correct, 0 for incorrect');

		$sm01 = $this->smellitem('sm01','Smell 01:');
		$sm02 = $this->smellitem('sm02','Smell 02:');
		$sm03 = $this->smellitem('sm03','Smell 03:');		
		$sm04 = $this->smellitem('sm04','Smell 04:');
		$sm05 = $this->smellitem('sm05','Smell 05:');
		$sm06 = $this->smellitem('sm06','Smell 06:');
		$sm07 = $this->smellitem('sm07','Smell 07:');
		$sm08 = $this->smellitem('sm08','Smell 08:');
		$sm09 = $this->smellitem('sm09','Smell 09:');
		$sm10 = $this->smellitem('sm10','Smell 10:');
		$sm11 = $this->smellitem('sm11','Smell 11:');
		$sm12 = $this->smellitem('sm12','Smell 12:');
		$sm13 = $this->smellitem('sm13','Smell 13:');		
		$sm14 = $this->smellitem('sm14','Smell 14:');
		$sm15 = $this->smellitem('sm15','Smell 15:');
		$sm16 = $this->smellitem('sm16','Smell 16:');
		$sm17 = $this->smellitem('sm17','Smell 17:');
		$sm18 = $this->smellitem('sm18','Smell 18:');
		$sm19 = $this->smellitem('sm19','Smell 19:');
		$sm20 = $this->smellitem('sm20','Smell 20:');
		$sm21 = $this->smellitem('sm21','Smell 21:');
		$sm22 = $this->smellitem('sm22','Smell 22:');
		$sm23 = $this->smellitem('sm23','Smell 23:');		
		$sm24 = $this->smellitem('sm24','Smell 24:');
		$sm25 = $this->smellitem('sm25','Smell 25:');
		$sm26 = $this->smellitem('sm26','Smell 26:');
		$sm27 = $this->smellitem('sm27','Smell 27:');
		$sm28 = $this->smellitem('sm28','Smell 28:');
		$sm29 = $this->smellitem('sm29','Smell 29:');
		$sm30 = $this->smellitem('sm30','Smell 30:');
		$sm31 = $this->smellitem('sm31','Smell 31:');
		$sm32 = $this->smellitem('sm32','Smell 32:');
		$sm33 = $this->smellitem('sm33','Smell 33:');		
		$sm34 = $this->smellitem('sm34','Smell 34:');
		$sm35 = $this->smellitem('sm35','Smell 35:');
		$sm36 = $this->smellitem('sm36','Smell 36:');
		$sm37 = $this->smellitem('sm37','Smell 37:');
		$sm38 = $this->smellitem('sm38','Smell 38:');
		$sm39 = $this->smellitem('sm39','Smell 39:');
		$sm40 = $this->smellitem('sm40','Smell 40:');

		$smelltot = $this->form->addElement('static','smelltot','Calculated total:'); 
		
		$smell_pct = $this->form->addElement('text', 'smell_pct', 'SMELL PCT:');
		$this->addRule('smell_pct', 'Value must be numeric', 'numeric', 'client');

		$omt_tot = $this->form->addElement('text', 'omt_tot', 'Odor Memory Test Total:');
		$this->addRule('omt_tot', 'Value must be numeric', 'numeric', 'client');

		$smthresh = $this->form->addElement('text', 'smthresh', 'Smell Threshold Test:');
		$this->addRule('smthresh', 'Value must be numeric', 'numeric', 'client');


    }
   
   
}
?>
