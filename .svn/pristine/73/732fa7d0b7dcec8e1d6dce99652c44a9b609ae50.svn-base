<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_iadl extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */

	function additem($name,$text,$extopts) {

		$nargs = func_num_args();
		if ($nargs == 3 ) {
			$opts = array_merge(array(''=>'-Select an option-','A'=>'A','B'=>'B','C'=>'C'),$extopts);
		} else {
			$opts = array_merge(array(''=>'-Select an option-','A'=>'A','B'=>'B','C'=>'C'));
		}
		$element = $this->form->addElement('select', $name, $text,$opts);
		return $element;
	}

    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "iadl";           // test_names.Test_name
        $this->table = 'iadl';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("IADL");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		$notes = $this->form->addElement('textarea', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));
		$warnings = $this->form->addElement('static','warnings','Warnings:');
		$this->addHeader("<HDR>");

		//$i01 = $this->form->addElement('text', 'i01', '1 Telephone Use (A-D):');
		//$this->addRule('i01', 'Enter A,B,C,D,or NA', 'regex', '/(?i)^(na|a|b|c|d)$/', 'client');
		$this->additem('i01','1 Telephone Use (A-D):',array('D'=>'D'));		
		$this->additem('i02', '2 Shopping (A-D):',array('D'));
		$this->additem('i03', '3 Food Preparation (A-D):',array('D'));
		$this->additem('i04', '4 Housekeeping (A-E):',array('D','E'));
		$this->additem('i05', '5 Laundry (A-C):');
		$this->additem('i06', '6 Mode of Transportation (A-E):',array('D','E'));
		$this->additem('i07', '7 Responsibility for own Medications (A-C):');
		$this->additem('i08', '8 Ability to Handle Finances (A-C):');
		$this->additem('i09', '9 Toileting (A-E):',array('D','E'));
		$this->additem('i10', '10 Feeding (A-E):',array('D','E'));
		$this->additem('i11', '11 Dressing (A-E):',array('D','E'));
		$this->additem('i12', '12 Grooming (A-E):',array('D','E'));
		$this->additem('i13', '13 Physical Ambulation (A-E):',array('D','E'));
		$this->additem('i14', '14 Bathing (A-E):',array('D','E'));
		$total = $this->form->addElement('static','total','Calculated total:'); 
    }
   
   
}
?>
