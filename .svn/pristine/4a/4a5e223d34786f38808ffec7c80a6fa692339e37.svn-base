<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_clinical extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */
    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "clinical";           // test_names.Test_name
        $this->table = 'clinical';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("Clinical Summary");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		$this->addHeader("<MY TITLE>");		
		$notes = $this->form->addElement('text', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));
		$color_blind = $this->form->addElement('text', 'color_blind', 'Color blind:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('color_blind', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');

		$this->addHeader("History");		
		$this->form->addElement('static','hdr','--- Answer Y/N for this section ---');
		$cancer = $this->form->addElement('text', 'cancer', 'Cancer:', array('size' => 50, 'maxlength' => 255));
		$diabetes = $this->form->addElement('text', 'diabetes', 'Diabetes:', array('size' => 50, 'maxlength' => 255));
		$asthma = $this->form->addElement('text', 'asthma', 'Asthma:', array('size' => 50, 'maxlength' => 255));		
		$stroke = $this->form->addElement('text', 'stroke', 'Stroke:', array('size' => 50, 'maxlength' => 255));
		$mstroke = $this->form->addElement('text', 'mstroke', 'Mini stroke:', array('size' => 50, 'maxlength' => 255));
		$head_inj = $this->form->addElement('text', 'head_inj', 'Head injury:', array('size' => 50, 'maxlength' => 255));
		$bleed = $this->form->addElement('text', 'bleed', 'Bleeding disorder/excessive bleeding:', array('size' => 50, 'maxlength' => 255));
		$encephalitis = $this->form->addElement('text', 'encephalitis', 'Encephalitis:', array('size' => 50, 'maxlength' => 255));
		$seizure = $this->form->addElement('text', 'seizure', 'Seizure:', array('size' => 50, 'maxlength' => 255));
		$liver = $this->form->addElement('text', 'liver', 'Liver or kidney problems:', array('size' => 50, 'maxlength' => 255));
		$brain_sur = $this->form->addElement('text', 'brain_sur', 'Brain surgery:', array('size' => 50, 'maxlength' => 255));
		$lupus = $this->form->addElement('text', 'lupus', 'Lupus:', array('size' => 50, 'maxlength' => 255));
		$depression = $this->form->addElement('text', 'depression', 'Depression:', array('size' => 50, 'maxlength' => 255));
		$anxiety = $this->form->addElement('text', 'anxiety', 'Anxiety:', array('size' => 50, 'maxlength' => 255));
		$high_bp = $this->form->addElement('text', 'high_bp', 'High blood pressure/hypertension:', array('size' => 50, 'maxlength' => 255));
		$prior_mi = $this->form->addElement('text', 'prior_mi', 'Heart attack/problems:', array('size' => 50, 'maxlength' => 255));
		$headache = $this->form->addElement('text', 'headache', 'Headaches/migraines:', array('size' => 50, 'maxlength' => 255));

		// history rules
		$this->addRule('diabetes', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('asthma', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('stroke', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('mstroke', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('head_inj', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('bleed', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('encephalitis', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('seizure', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('liver', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('brain_sur', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('lupus', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('depression', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('anxiety', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('high_bp', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('prior_mi', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');
		$this->addRule('headache', 'Enter y,n,or NA', 'regex', '/(?i)^(na|y|n)$/', 'client');

		$this->addHeader("<MY TITLE>");		
		$this->addHeader("<MY TITLE>");		
		$this->addHeader("<MY TITLE>");		
		$disease_dur = $this->form->addElement('text', 'disease_dur', 'Disease duration (years):', array('size' => 50, 'maxlength' => 255));
		$mallampati = $this->form->addElement('text', 'mallampati', 'Mallampati Score:', array('size' => 50, 'maxlength' => 255));
		$hand_dom = $this->form->addElement('text', 'hand_dom', 'Hand dominance (R/L):', array('size' => 50, 'maxlength' => 255));
		$this->addRule('disease_dur', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('mallampati', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('hand_dom', 'Enter R,L,or NA', 'regex', '/(?i)^(na|r|l)$/', 'client');

		$height = $this->form->addElement('text', 'height', 'Height (in):', array('size' => 50, 'maxlength' => 255));
		$weight = $this->form->addElement('text', 'weight', 'Weight (lbs):', array('size' => 50, 'maxlength' => 255));		
		$fat_pct = $this->form->addElement('text', 'fat_pct', 'Fat %:', array('size' => 50, 'maxlength' => 255));
		$fat_rating = $this->form->addElement('text', 'fat_rating', 'Fat Rating:', array('size' => 50, 'maxlength' => 255));
		$this->addRule('height', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('weight', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('fat_pct', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('fat_rating', 'Value must be numeric', 'numeric', 'client');


		$hx_smoke = $this->form->addElement('text', 'hx_smoke', 'Smoking history (0/1):', array('size' => 50, 'maxlength' => 255));
		$fall_house = $this->form->addElement('text', 'fall_house', 'History of falling in the house 0/1):', array('size' => 50, 'maxlength' => 255));
		$dog = $this->form->addElement('text', 'dog', 'Own a dog (0/1):', array('size' => 50, 'maxlength' => 255));
		$age_imp = $this->form->addElement('text', 'age_imp', 'Age LMP	:', array('size' => 50, 'maxlength' => 255));

		$this->addRule('hx_smoke', 'Enter 0,1,or NA', 'regex', '/(?i)^(na|1|0)$/', 'client');
		$this->addRule('fall_house', 'Enter 0,1,or NA', 'regex', '/(?i)^(na|1|0)$/', 'client');
		$this->addRule('dog', 'Enter 0,1,or NA', 'regex', '/(?i)^(na|1|0)$/', 'client');
		$this->addRule('age_imp', 'Value must be numeric', 'numeric', 'client');

		//$this->addHeader("Blood Pressure");
		$this->addHeader("<MY TITLE>");		
		$this->addHeader("<MY TITLE>");				
		$bp_s_sit = $this->form->addElement('text', 'bp_s_sit', 'Blood Pressure - Systolic (sit):', array('size' => 50, 'maxlength' => 255));
		$bp_s_sta = $this->form->addElement('text', 'bp_s_sta', 'Blood Pressure - Systolic (stand):', array('size' => 50, 'maxlength' => 255));

		$bp_d_sit = $this->form->addElement('text', 'bp_d_sit', 'Blood Pressure - Diastolic (sit):', array('size' => 50, 'maxlength' => 255));
		$bp_d_sta = $this->form->addElement('text', 'bp_d_sta', 'Blood Pressure - Diastolic (stand):', array('size' => 50, 'maxlength' => 255));

		$pls_sit = $this->form->addElement('text', 'pls_sit', 'Pulse (sit):', array('size' => 50, 'maxlength' => 255));
		$pls_sta = $this->form->addElement('text', 'pls_sta', 'Pulse (stand):', array('size' => 50, 'maxlength' => 255));

		$this->addRule('bp_s_sit', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('bp_s_sta', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('bp_d_sit', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('bp_d_sta', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('pls_sit', 'Value must be numeric', 'numeric', 'client');
		$this->addRule('pls_sta', 'Value must be numeric', 'numeric', 'client');

		$bmi = $this->form->addElement('static','bmi','Calculated BMI:'); 
    }
   
   
}
?>
