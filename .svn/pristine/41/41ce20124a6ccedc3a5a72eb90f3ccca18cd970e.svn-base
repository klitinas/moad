<?php
require_once 'HTML/QuickForm/Rule/Regex.php';
class NDB_BVL_Instrument_activity extends NDB_BVL_Instrument
{
    /**
    * sets up basic data, such as the HTML_Quickform object, and so on.
    *
    * @param string $commentID  the CommentID identifying the data to load
    * @param string $page       if a multipage form, the page to show
    * @return void
    * @access public
    */
    function setup($commentID, $page){
        $this->formType="XIN";
        $this->form = new HTML_Quickform('test_form');
        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)
        
        // set the object properties
        $this->testName = "activity";           // test_names.Test_name
        $this->table = 'activity';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;
        
        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields=array("Date_taken");
            
        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // required fields for data entry completion status
        $this->_requiredElements = array('Examiner', '<FIRST QUESTION OF EACH PAGE>');

        // setup the form
        $this->_setupForm();

    }
    
    //If the instrument is not paged, remove the switch from the _setupForm method and add all the form Elements in this function.
    
    /**
    * method to build the HTML_Quickform object into a paged form
    *
    * @return void
    * @access private
    */
    function _setupForm(){
        switch($this->page) {
            case "<testvalidate>_page1":
            $this->_page1();
            break;
            
            default:
            $this->_main();
            break;
        }
        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this,'XINValidate'));
    }
    
    /**
    * generates the main page of the form.
    *
    * @return void
    * @access private
    *
    */
    function _main(){
        // display test name
        $this->addHeader("Activity Questionnaire");
        
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

		$notes = $this->form->addElement('textarea', 'notes', 'Notes:', array('size' => 50, 'maxlength' => 100));
		$warnings = $this->form->addElement('static','warnings','Warnings:');

		$this->addHeader("<MY TITLE>");		
		$hdr = $this->form->addElement('static','hdr','Moderate Intensity');

		$weekopts = array_merge(array(''=>'-Select an option-'),range(0,7));
		$this->form->addElement('select', 'mi_week', 'In a typical week, how many days do you do moderate-intensity activities?',$weekopts);

		$mi_day = $this->form->addElement('text', 'mi_day', 'In a typical day when you do a moderate intensity activity, how many minutes you engage in a moderate-intensity activity?');


		$this->addHeader("<MY TITLE>");		
		$hdr = $this->form->addElement('static','hdr','Vigorous Intensity');
		$this->form->addElement('select', 'vi_week','In a typical week, how many days do you do vigorous-intensity activities?',$weekopts);


		$vi_day = $this->form->addElement('text', 'vi_day', 'In a typical day when you do a vigorous intensity activity, how many minutes you engage in a vigourous-intensity activity?');


		$this->addHeader("<MY TITLE>");		
		$hdr = $this->form->addElement('static','hdr','Sitting');

		$sitting_day = $this->form->addElement('text', 'sitting_day', 'How much time sitting in typical day? (hours)');

		// Rules
		$this->form->registerRule('checkrange', 'callback', 'checkrange');
		$this->form->addRule('mi_day', 'Enter a value from 0 to 1440', 'checkrange',array(0,1440));
		$this->form->addRule('vi_day', 'Enter a value from 0 to 1440', 'checkrange',array(0,1440));
		$this->form->addRule('sitting_day', 'Enter a value from 0 to 1440', 'checkrange',array(0,1440));
    }   
   
}
	function checkrange($ve,$rng) {
		$minVal = $rng[0];
		$maxVal = $rng[1];
		if (( $ve < $minVal) or ( $ve > $maxVal)) {
			return false;

		} else {
			return true;
		}
	}
?>
